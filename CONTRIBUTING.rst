.. highlight:: shell

==================
Участие в развитии
==================

Вклады в развитие библиотеки приветствуются, и они высоко ценятся!

Вы можете внести свой вклад во несколькими вариантами:

Типы вкладов
------------

Сообщайте об ошибках
~~~~~~~~~~~~~~~~~~~~

Сообщайте об ошибках на https://github.com/mostm/pyqiwi/issues.

Если вы сообщаете об баге, пожалуйста добавьте:

* Ваша операционная система, и версия библиотеки.
* Любые детали об вашей установке могли бы помочь в устранении неисправности.
* Подробные шаги для воспроизведения ошибки. 

Исправляйте ошибки
~~~~~~~~~~~~~~~~~~

Посмотрите через GitHub Issues об ошибках. Все что помечено "bug" или "help
 wanted" открыто для тех, кто хочет его реализовать.

Реализуйте новые фичи
~~~~~~~~~~~~~~~~~~~~~

Просмотрите через GitHub Issues об фичах. Что-нибудь с тегами "enhancement"
и "help wanted" открыто для тех, кто хочет её реализовать.

Напишите документацию
~~~~~~~~~~~~~~~~~~~~~

pyQiwi всегда может использовать больше документации, будь то как часть
официальных документациях, в докстрингах, или даже в блог постах,
статях и тому подобном.

Отправить Отзыв
~~~~~~~~~~~~~~~

Лучший способ отправить отзыв-отправить issue на https://github.com/mostm/pyqiwi/issues.

Если вы предлагаете фичу:

* Подробно объясните, как это будет работать.
* Держите область как можно более узкой, чтобы упростить ее реализацию.
* Помните, что это добровольный проект, и что вклады приветствуются :)


Начните!
--------

Готовы внести свой вклад? Вот как настроить `pyQiwi` для разработки.

1. Сделайте форк репозитория `pyqiwi` на GitHub. 
2. Клонируйте свой форк локально::

    $ git clone git@github.com:ваше_имя_здесь/pyqiwi.git

3. Установите вашу локальную копию в virtualenv. Предпологая то что вы уже установили virtualenvwrapper, это как вы настраиваете свой форк для локальной разработки::

    $ mkvirtualenv pyqiwi
    $ cd pyqiwi/
    $ python setup.py develop

4. Создайте ветку для локальной разработки::

    $ git checkout -b имя-вашего-фикса-или-фичи

   Теперь вы можете внести свое изменение.

5. Как только вы закончили делать изменения, проверьте то что ваши изменения проходят flake8 и
   тесты, включая тестируя несколько других Python версий с tox::

    $ flake8 pyqiwi tests
    $ python setup.py test or py.test
    $ tox

   Для того чтобы получить flake8 и tox, просто pip install их в ваш virtualenv.

6. Сделайте коммит ваших изменений и отправьте вашу ветку на GitHub::

    $ git add .
    $ git commit -m "Подробное описание изменений."
    $ git push origin имя-вашего-фикса-или-фичи

7. Отправьте пулл реквест используя сайт GitHub.

Рекомендации по пулл реквестам 
--------------------------

Перед тем как отправить пулл реквест, проверьте то что он отвечает этим требованиям:

1. Пулл реквест должен добавлять тесты.
2. Если пулл реквест добавляет функциональность, документация должна быть обновлена.
   Добавьте вашу новую функциональность в функцию с докстрингом, 
   и добавьте вашу фичу в список в README.rst.
3. Пулл реквест должен работать с Python 3.4, 3.5 и 3.6. Проверьте
   https://travis-ci.org/mostm/pyqiwi/pull_requests
   и будьте уверены в том что все тесты прошли успешно на всех поддерживаемых Python версиях.

Подсказка
---------

Для того чтобы запустить тесты::

$ py.test tests.test_pyqiwi


Развертывание
-------------

Напоминание разработчикам о том, как развернуть.
Убедитесь, что все изменения закоммитчены (включая запись в HISTORY.rst).
Затем запустите::

$ bumpversion patch # возможные: major / minor / patch
$ git push
$ git push --tags

Travis CI затем отправит все это на PyPI, если тесты прошли успешно.
